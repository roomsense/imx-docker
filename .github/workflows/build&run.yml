name: Build i.MX Yocto in Docker

on:
  workflow_dispatch:
    inputs:
      ubuntu_version:
        description: 'Ubuntu Dockerfile version'
        required: true
        default: 'Dockerfile-Ubuntu-22.04'
        type: choice
        options:
          - 'Dockerfile-Ubuntu-20.04'
          - 'Dockerfile-Ubuntu-22.04'
          - 'Dockerfile-Ubuntu-24.04'
      imx_release:
        description: 'IMX release to build'
        required: true
        default: 'imx-6.1.22-2.0.0'

jobs:
  validate-inputs:
    runs-on: ubuntu-latest
    outputs:
      ubuntu_version: ${{ steps.validate.outputs.ubuntu_version }}
      imx_release: ${{ steps.validate.outputs.imx_release }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Debug repository structure
        run: ls -la

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

- name: Free up disk space
  run: |
    echo "Before cleanup:"
    df -h

    # List of packages to attempt purging
    packages_to_remove=(
      hhvm php5 php7.4 php8.2 mysql-server-5.7 google-cloud-sdk
    )

    for pkg in "${packages_to_remove[@]}"; do
      # Check if package exists in apt cache
      if apt-cache show "$pkg" >/dev/null 2>&1; then
        # Check if package is installed
        if dpkg -l | grep -q "^ii\s\+$pkg"; then
          echo "Purging installed package: $pkg"
          sudo apt-get purge -y "$pkg"
        else
          echo "$pkg exists but is not installed"
        fi
      else
        echo "$pkg not found in APT cache, skipping"
      fi
    done

    sudo apt-get autoremove -y
    sudo apt-get clean

    echo "After cleanup:"
    df -h

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build \
            -f ${{ github.event.inputs.ubuntu_version }} \
            --build-arg IMX_RELEASE=${{ github.event.inputs.imx_release }} \
            -t imx-yocto:latest .
