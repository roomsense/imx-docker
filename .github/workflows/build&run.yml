name: Build i.MX Yocto in Docker

on:
  workflow_dispatch:
    inputs:
      ubuntu_version:
        description: 'Ubuntu Dockerfile version'
        required: true
        default: 'Dockerfile-Ubuntu-22.04'
        type: choice
        options:
          - 'Dockerfile-Ubuntu-20.04'
          - 'Dockerfile-Ubuntu-22.04'
          - 'Dockerfile-Ubuntu-24.04'
      imx_release:
        description: 'IMX release to build'
        required: true
        default: 'imx-6.1.22-2.0.0'
      machine:
        description: 'Target machine/board'
        required: true
        default: 'imx8mp-lpddr4-evk'
        type: choice
        options:
          # === i.MX 6 ===
          - 'imx6qpsabresd'
          - 'imx6ulevk'
          - 'imx6ulz-14x14-evk'
          - 'imx6ull14x14evk'
          - 'imx6ull9x9evk'
          - 'imx6dlsabresd'
          - 'imx6qsabresd'
          - 'imx6solosabresd'
          - 'imx6sxsabresd'
          - 'imx6sllevk'
          # === i.MX 7 ===
          - 'imx7dsabresd'
          - 'imx7ulpevk'
          # === i.MX 8 ===
          - 'imx8qmmek'
          - 'imx8qxpc0mek'
          - 'imx8mqevk'
          - 'imx8mm-lpddr4-evk'
          - 'imx8mm-ddr4-evk'
          - 'imx8mn-lpddr4-evk'
          - 'imx8mn-ddr4-evk'
          - 'imx8mp-lpddr4-evk'
          - 'imx8mp-ddr4-evk'
          - 'imx8dxla1-lpddr4-evk'
          - 'imx8dxlb0-lpddr4-evk'
          - 'imx8dxlb0-ddr3l-evk'
          - 'imx8mnddr3levk'
          - 'imx8ulp-lpddr4-evk'
          - 'imx8ulp-9x9-lpddr4-evk'
          # === i.MX 9 ===
          - 'imx91-11x11-lpddr4-evk'
          - 'imx91-9x9-lpddr4-qsb'
          - 'imx93-11x11-lpddr4x-evk'
          - 'imx93-14x14-lpddr4x-evk'
          - 'imx93-9x9-lpddr4-qsb'
          - 'imx95-19x19-lpddr5-evk'
          - 'imx95-15x15-lpddr4x-evk'
          - 'imx95-19x19-verdin'

jobs:
  validate-inputs:
    runs-on: ubuntu-latest
    outputs:
      ubuntu_version: ${{ steps.validate.outputs.ubuntu_version }}
      imx_release: ${{ steps.validate.outputs.imx_release }}
      machine: ${{ steps.validate.outputs.machine }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Debug repository structure
        run: |
          echo "=== Repository Structure ==="
          ls -la
          echo "=== Input Values ==="
          echo "Ubuntu version: '${{ github.event.inputs.ubuntu_version }}'"
          echo "IMX release: '${{ github.event.inputs.imx_release }}'"
          echo "Machine: '${{ github.event.inputs.machine }}'"
          
      - name: Validate inputs
        id: validate
        run: |
          echo "üîç Starting validation..."
          VALIDATION_FAILED=false
          
          # Check Ubuntu Dockerfile
          if [ ! -f "${{ github.event.inputs.ubuntu_version }}" ]; then
            echo "‚ùå Error: Dockerfile ${{ github.event.inputs.ubuntu_version }} not found"
            echo "Available Dockerfiles:"
            ls -la Dockerfile* 2>/dev/null || echo "No Dockerfiles found"
            VALIDATION_FAILED=true
          else
            echo "‚úÖ Found Dockerfile: ${{ github.event.inputs.ubuntu_version }}"
          fi
          
          # Check if env.sh exists
          if [ ! -f "env.sh" ]; then
            echo "‚ùå Error: env.sh file not found"
            VALIDATION_FAILED=true
          else
            echo "‚úÖ Found env.sh file"
          fi
          
          # Final validation check
          if [ "$VALIDATION_FAILED" = "true" ]; then
            echo "üí• Validation failed - stopping workflow"
            exit 1
          fi
          
          # Set outputs for next job
          echo "ubuntu_version=${{ github.event.inputs.ubuntu_version }}" >> $GITHUB_OUTPUT
          echo "imx_release=${{ github.event.inputs.imx_release }}" >> $GITHUB_OUTPUT
          echo "machine=${{ github.event.inputs.machine }}" >> $GITHUB_OUTPUT
          
          echo "‚úÖ All inputs validated successfully"

  build:
    runs-on: ubuntu-latest
    needs: validate-inputs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Update env.sh with MACHINE variable
        run: |
          echo "üîß Updating env.sh with MACHINE variable..."
          
          # Check if env.sh exists
          if [ ! -f "env.sh" ]; then
            echo "‚ùå Error: env.sh file not found"
            exit 1
          fi
          
          # Display current content around line 16
          echo "üìÑ Current env.sh content around line 16:"
          sed -n '10,20p' env.sh || echo "File has fewer than 20 lines"
          
          # Create backup
          cp env.sh env.sh.backup
          echo "üìã Created backup: env.sh.backup"
          
          # Check if line 16 exists
          LINE_COUNT=$(wc -l < env.sh)
          if [ $LINE_COUNT -lt 16 ]; then
            echo "üìù File has only $LINE_COUNT lines, adding empty lines to reach line 16..."
            while [ $(wc -l < env.sh) -lt 15 ]; do
              echo "" >> env.sh
            done
            echo "MACHINE=${{ needs.validate-inputs.outputs.machine }}" >> env.sh
          else
            # Replace or insert at line 16
            if grep -q "^MACHINE=" env.sh; then
              echo "üîÑ Updating existing MACHINE variable..."
              sed -i "s/^MACHINE=.*/MACHINE=${{ needs.validate-inputs.outputs.machine }}/" env.sh
            else
              echo "‚ûï Adding MACHINE variable at line 16..."
              sed -i "16i\\MACHINE=${{ needs.validate-inputs.outputs.machine }}" env.sh
            fi
          fi
          
          # Verify the change
          echo "‚úÖ Updated env.sh content around line 16:"
          sed -n '10,20p' env.sh || echo "File has fewer than 20 lines"
          
          # Show what was added/changed
          echo "üéØ MACHINE variable set to: ${{ needs.validate-inputs.outputs.machine }}"
        
      - name: Free up disk space
        run: |
          echo "üìä Before cleanup:"
          df -h
          
          echo "üßπ Freeing up disk space..."
          
          # Clean apt cache
          sudo apt-get clean
          sudo apt-get autoremove -y
          
          # Remove large directories commonly found on GitHub Actions runners
          echo "üóëÔ∏è Removing large unused components..."
          sudo rm -rf /usr/share/dotnet \
                      /usr/local/lib/android \
                      /opt/ghc \
                      /opt/hostedtoolcache/go \
                      /opt/hostedtoolcache/CodeQL \
                      /opt/hostedtoolcache/Python \
                      /opt/hostedtoolcache/Ruby \
                      /usr/local/share/powershell \
                      /usr/local/share/chromium \
                      /usr/local/lib/node_modules 2>/dev/null || true
          
          # Remove specific packages if installed (simplified approach)
          packages_to_remove="mysql-server* postgresql* mongodb*"
          for pkg in $packages_to_remove; do
            if dpkg -l | grep -q "$pkg"; then
              echo "Removing $pkg"
              sudo apt-get purge -y $pkg 2>/dev/null || true
            fi
          done
          
          sudo apt-get autoremove -y
          sudo apt-get autoclean
          
          echo "üìä After cleanup:"
          df -h
          
      - name: Verify Docker daemon
        run: |
          echo "üê≥ Checking Docker daemon status..."
          
          # Check if Docker daemon is running
          if ! sudo systemctl is-active --quiet docker; then
            echo "Starting Docker daemon..."
            sudo systemctl start docker
            sudo systemctl enable docker
          fi
          
          # Wait for Docker to be ready
          echo "‚è≥ Waiting for Docker daemon to be ready..."
          timeout 30 bash -c 'until docker info > /dev/null 2>&1; do echo "Waiting for Docker..."; sleep 2; done'
          
          # Verify Docker is working
          echo "‚úÖ Docker status:"
          docker --version
          docker info
          sudo systemctl status docker --no-pager -l
          
      - name: Build Docker image
        run: |
          echo "üê≥ Building Docker image with standard Docker build..."
          echo "Using Dockerfile: ${{ needs.validate-inputs.outputs.ubuntu_version }}"
          echo "IMX Release: ${{ needs.validate-inputs.outputs.imx_release }}"
          echo "Machine: ${{ needs.validate-inputs.outputs.machine }}"
          
          # Set build arguments - FIXED: Use the correct argument names
          BUILD_USER="yocto"
          BUILD_UID="1000"
          BUILD_GID="1000"
          
          echo "Build arguments:"
          echo "  USER: $BUILD_USER"
          echo "  host_uid: $BUILD_UID"
          echo "  host_gid: $BUILD_GID"
          echo "  IMX_RELEASE: ${{ needs.validate-inputs.outputs.imx_release }}"
          echo "  MACHINE: ${{ needs.validate-inputs.outputs.machine }}"
          
          # Use regular docker build with correct argument names
          if ! docker build \
            -f "${{ needs.validate-inputs.outputs.ubuntu_version }}" \
            --build-arg USER="$BUILD_USER" \
            --build-arg host_uid="$BUILD_UID" \
            --build-arg host_gid="$BUILD_GID" \
            --build-arg IMX_RELEASE="${{ needs.validate-inputs.outputs.imx_release }}" \
            --build-arg MACHINE="${{ needs.validate-inputs.outputs.machine }}" \
            --progress=plain \
            -t imx-yocto:latest .; then
            echo "‚ùå Docker build failed"
            
            # Debug information
            echo "üîç Debug information:"
            docker ps -a
            sudo systemctl status docker --no-pager -l
            
            exit 1
          fi
          
          echo "‚úÖ Docker image built successfully"
          docker images imx-yocto:latest
          
        # Add these steps after "Build Docker image" in your workflow

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Tag and push Docker image
        run: |
          # Create tags
          IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/imx-yocto"
          IMAGE_TAG="${{ needs.validate-inputs.outputs.imx_release }}-${{ needs.validate-inputs.outputs.ubuntu_version }}-${{ needs.validate-inputs.outputs.machine }}"
          
          echo "üè∑Ô∏è Tagging image..."
          docker tag imx-yocto:latest "$IMAGE_NAME:$IMAGE_TAG"
          docker tag imx-yocto:latest "$IMAGE_NAME:latest"
          
          echo "üì§ Pushing image to registry..."
          docker push "$IMAGE_NAME:$IMAGE_TAG"
          docker push "$IMAGE_NAME:latest"
          
          echo "‚úÖ Image pushed successfully!"
          echo "üì¶ Available at: $IMAGE_NAME:$IMAGE_TAG"
          echo "üì¶ Available at: $IMAGE_NAME:latest"
          
      - name: Build completion
        run: |
          echo "üéâ Build completed successfully!"
          echo "üì¶ Docker image: imx-yocto:latest"
          echo "üéØ Machine: ${{ needs.validate-inputs.outputs.machine }}"
          echo "‚è±Ô∏è Build finished at: $(date)"
