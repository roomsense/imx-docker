# .github/workflows/imx-docker.yml
name: Build i.MX Yocto in Docker

on:
  workflow_dispatch:
    inputs:
      ubuntu_version:
        description: 'Ubuntu Dockerfile version'
        required: true
        default: 'Dockerfile-Ubuntu-22.04'
        type: choice
        options:
          - 'Dockerfile-Ubuntu-20.04'
          - 'Dockerfile-Ubuntu-22.04'
          - 'Dockerfile-Ubuntu-24.04'
      imx_release:
        description: 'IMX release to build'
        required: true
        default: 'imx-6.1.22-2.0.0'
        type: string

jobs:
  validate-inputs:
    runs-on: ubuntu-latest
    outputs:
      ubuntu_version: ${{ steps.validate.outputs.ubuntu_version }}
      imx_release: ${{ steps.validate.outputs.imx_release }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Debug repository structure
        run: |
          echo "=== Repository Structure ==="
          find . -type f -name "*.sh" -o -name "Dockerfile*" -o -name "*.yml" | head -20
          echo "=== Working Directory ==="
          pwd
          ls -la
          echo "=== Input Values ==="
          echo "Ubuntu version: '${{ github.event.inputs.ubuntu_version }}'"
          echo "IMX release: '${{ github.event.inputs.imx_release }}'"
          
      - name: Validate inputs
        id: validate
        run: |
          echo "🔍 Starting validation..."
          VALIDATION_FAILED=false
          
          # Check Ubuntu Dockerfile
          if [ ! -f "${{ github.event.inputs.ubuntu_version }}" ]; then
            echo "❌ Error: Dockerfile ${{ github.event.inputs.ubuntu_version }} not found"
            echo "Available Dockerfiles:"
            ls -la Dockerfile* 2>/dev/null || echo "No Dockerfiles found"
            VALIDATION_FAILED=true
          else
            echo "✅ Found Dockerfile: ${{ github.event.inputs.ubuntu_version }}"
          fi
          
          # Check IMX release directory
          if [ ! -d "${{ github.event.inputs.imx_release }}" ]; then
            echo "❌ Error: IMX release directory ${{ github.event.inputs.imx_release }} not found"
            echo "Available directories:"
            ls -la | grep "^d" || echo "No directories found"
            VALIDATION_FAILED=true
          else
            echo "✅ Found IMX release directory: ${{ github.event.inputs.imx_release }}"
          fi
          
          # Check yocto-build.sh in release directory
          if [ ! -f "${{ github.event.inputs.imx_release }}/yocto-build.sh" ]; then
            echo "❌ Error: yocto-build.sh not found in ${{ github.event.inputs.imx_release }}/"
            if [ -d "${{ github.event.inputs.imx_release }}" ]; then
              echo "Contents of ${{ github.event.inputs.imx_release }}:"
              ls -la "${{ github.event.inputs.imx_release }}/" || echo "Cannot list directory contents"
            fi
            VALIDATION_FAILED=true
          else
            echo "✅ Found yocto-build.sh in ${{ github.event.inputs.imx_release }}/"
          fi
          
          # Check required scripts
          if [ ! -f "docker-build.sh" ]; then
            echo "❌ Error: docker-build.sh not found"
            VALIDATION_FAILED=true
          else
            echo "✅ Found docker-build.sh"
          fi
          
          if [ ! -f "docker-run.sh" ]; then
            echo "❌ Error: docker-run.sh not found"
            VALIDATION_FAILED=true
          else
            echo "✅ Found docker-run.sh"
          fi
          
          # Final validation check
          if [ "$VALIDATION_FAILED" = "true" ]; then
            echo "💥 Validation failed - stopping workflow"
            exit 100
          fi
          
          echo "ubuntu_version=${{ github.event.inputs.ubuntu_version }}" >> $GITHUB_OUTPUT
          echo "imx_release=${{ github.event.inputs.imx_release }}" >> $GITHUB_OUTPUT
          
          echo "✅ All inputs validated successfully"

  build:
    runs-on: ubuntu-latest
    needs: validate-inputs
    timeout-minutes: 480  # 8 hours timeout for long Yocto builds
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up build environment
        run: |
          # Make scripts executable
          chmod +x docker-build.sh docker-run.sh
          chmod +x "${{ needs.validate-inputs.outputs.imx_release }}/yocto-build.sh"
          
          # Display build information
          echo "🐳 Building with Ubuntu: ${{ needs.validate-inputs.outputs.ubuntu_version }}"
          echo "🔧 IMX Release: ${{ needs.validate-inputs.outputs.imx_release }}"
          echo "📅 Build started at: $(date)"
          
      - name: Free up disk space
        run: |
          echo "🧹 Freeing up disk space for Yocto build..."
          echo "📊 Disk space before cleanup:"
          df -h
          
          # Update package database
          sudo apt-get update -qq || true
          
          # Remove packages individually to handle missing packages gracefully
          echo "Removing unnecessary packages (ignoring missing packages)..."
          
          # Function to safely remove packages
          safe_remove() {
            for package in "$@"; do
              if dpkg -l | grep -q "^ii.*$package"; then
                echo "Removing $package..."
                sudo apt-get remove -y --purge "$package" 2>/dev/null || echo "Failed to remove $package"
              else
                echo "Package $package not installed, skipping..."
              fi
            done
          }
          
          # Remove packages by category
          safe_remove azure-cli google-cloud-sdk google-chrome-stable firefox powershell mono-devel snapd
          
          # Remove dotnet packages (if any exist)
          sudo apt-get remove -y --purge 'dotnet-*' 2>/dev/null || echo "No dotnet packages found"
          
          # Remove llvm packages (if any exist) 
          sudo apt-get remove -y --purge 'llvm-*' 2>/dev/null || echo "No llvm packages found"
          
          # Remove php packages (if any exist)
          sudo apt-get remove -y --purge 'php*' 2>/dev/null || echo "No php packages found"
          
          # Remove mongodb packages (if any exist)
          sudo apt-get remove -y --purge 'mongodb-*' 2>/dev/null || echo "No mongodb packages found"
          
          # Remove mysql packages (if any exist)
          sudo apt-get remove -y --purge 'mysql-*' 2>/dev/null || echo "No mysql packages found"
          
          # Clean up package cache and orphaned packages
          echo "Cleaning up package cache..."
          sudo apt-get autoremove -y || true
          sudo apt-get autoclean || true
          sudo apt-get clean || true
          
          # Remove large directories if they exist
          echo "Removing large directories..."
          sudo rm -rf /usr/share/dotnet 2>/dev/null || true
          sudo rm -rf /usr/local/lib/android 2>/dev/null || true
          sudo rm -rf /opt/ghc 2>/dev/null || true
          sudo rm -rf /usr/local/.ghcup 2>/dev/null || true
          sudo rm -rf /usr/share/swift 2>/dev/null || true
          
          # Clear various caches
          echo "Clearing caches..."
          sudo rm -rf /tmp/* 2>/dev/null || true
          sudo rm -rf /var/cache/apt/archives/* 2>/dev/null || true
          
          echo "📊 Disk space after cleanup:"
          df -h
          echo "✅ Disk cleanup completed successfully"
          
      - name: Build Docker image
        id: docker_build
        run: |
          echo "🔨 Building Docker image..."
          if ! ./docker-build.sh "${{ needs.validate-inputs.outputs.ubuntu_version }}"; then
            echo "❌ Docker build failed"
            exit 1
          fi
          echo "✅ Docker image built successfully"
          
      - name: Run Yocto build
        id: yocto_build
        env:
          IMX_RELEASE: ${{ needs.validate-inputs.outputs.imx_release }}
        run: |
          echo "🚀 Starting Yocto build..."
          echo "Build script: ${{ needs.validate-inputs.outputs.imx_release }}/yocto-build.sh"
          
          if ! ./docker-run.sh "${{ needs.validate-inputs.outputs.imx_release }}/yocto-build.sh"; then
            echo "❌ Yocto build failed"
            exit 1
          fi
          echo "✅ Yocto build completed successfully"
          
      - name: Collect build artifacts
        if: always()
        run: |
          # Create artifacts directory
          mkdir -p build-artifacts
          
          # Collect build logs (adjust paths as needed)
          find . -name "*.log" -type f -exec cp {} build-artifacts/ \; 2>/dev/null || true
          find . -name "cooker.log*" -type f -exec cp {} build-artifacts/ \; 2>/dev/null || true
          
          # Collect build summary
          echo "Build Summary:" > build-artifacts/build-summary.txt
          echo "Ubuntu Version: ${{ needs.validate-inputs.outputs.ubuntu_version }}" >> build-artifacts/build-summary.txt
          echo "IMX Release: ${{ needs.validate-inputs.outputs.imx_release }}" >> build-artifacts/build-summary.txt
          echo "Build Date: $(date)" >> build-artifacts/build-summary.txt
          echo "Build Status: ${{ job.status }}" >> build-artifacts/build-summary.txt
          
      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: yocto-build-logs-${{ needs.validate-inputs.outputs.imx_release }}
          path: build-artifacts/
          retention-days: 30
          
      - name: Build completion notification
        if: success()
        run: |
          echo "🎉 Build completed successfully!"
          echo "📦 Artifacts uploaded for IMX release: ${{ needs.validate-inputs.outputs.imx_release }}"
          echo "⏱️ Build finished at: $(date)"
